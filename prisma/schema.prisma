// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER") // ADMIN, USER
  cart      Cart?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String
  sizes       String[]    // Available sizes (e.g., ["38", "39", "40"])
  colors      String[]    // Available colors (e.g., ["Negro", "Blanco"])
  stock       Int         @default(0) // Total stock across all variants
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  variants    ProductVariant[] // Product variants with specific stock
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  size      String
  color     String
  stock     Int      @default(0)
  sku       String?  @unique
  barcode   String?
  
  @@unique([productId, size, color])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, size, color])
}

model Order {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  total       Float
  status      String    @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELLED
  paymentId   String?   // ID del pago en Mercado Pago/Stripe
  shipping    Json?     // Información de envío
  contactInfo Json      // Información de contacto
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  size      String
  color     String
  createdAt DateTime @default(now())
}

// Tabla para sesiones de carrito de invitados
model GuestCart {
  id        String    @id @default(uuid())
  items     Json      // { productId: number, quantity: number, size: string, color: string }[]
  expiresAt DateTime  @default(dbgenerated("(now() + '7 days'::interval)"))
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
