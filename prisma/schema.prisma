// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  orders    Order[]
  reviews   Review[]
  addresses Address[]

  @@map("users")
}

// Modelo de Categoría
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  products Product[]

  @@map("categories")
}

// Modelo de Marca
model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  products Product[]

  @@map("brands")
}

// Modelo de Producto
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)
  sku         String   @unique
  stock       Int      @default(0)
  images      String[] // Array de URLs de imágenes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  brandId    String
  brand      Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  
  sizes      ProductSize[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

// Modelo de Talla
model Size {
  id        String   @id @default(cuid())
  name      String   @unique // "US 7", "US 8", etc.
  euSize    String?  // Talla europea
  ukSize    String?  // Talla británica
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  productSizes ProductSize[]

  @@map("sizes")
}

// Modelo de relación Producto-Talla
model ProductSize {
  id        String @id @default(cuid())
  stock     Int    @default(0)
  
  // Relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeId])
  @@map("product_sizes")
}

// Modelo de Orden
model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2)
  shipping      Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relaciones
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  addressId String
  address   Address     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  
  items     OrderItem[]

  @@map("orders")
}

// Modelo de Item de Orden
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Modelo de Dirección
model Address {
  id           String  @id @default(cuid())
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  orders Order[]

  @@map("addresses")
}

// Modelo de Reseña
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 estrellas
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
